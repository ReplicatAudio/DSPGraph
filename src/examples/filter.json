{
    "paramVals": [
      0.75,
      0.5,
      0.5,
      0.5,
      0.5,
      0.5,
      0.5,
      0.5
    ],
    "periods": 2,
    "amplitude": 1,
    "errStr": "",
    "hasErr": false,
    "showRefSine": true,
    "userJS": "/*\n\nFilter Example:\n---\nA simple first order LP filter applied to a perfect square wave.\n\nThe lowpass filter is a first-order filter, which means \nthat it uses a weighted average of the current and previous \nsamples to produce the filtered output sample.\n\nThe `g[0]` term represents the previous output sample\nfrom the filter, which is used as part of the weighted average. \n\nThe `sample` term represents the current input sample \nfrom the waveform. \n\nThe `f` variable is the filter coefficient, \nwhich determines the weighting applied to the \ncurrent and previous samples in the average.\n\nThe `g[0]` variable is later used to store the \nfiltered output sample, \nwhich is calculated by adding the filter \ncoefficient `f` multiplied by the difference \nbetween the current input sample and the previous \noutput sample to the previous output sample. \nThis produces a smoothed output sample that is \ncloser to the previous output sample than the \ncurrent input sample, which effectively \nattenuates the high-frequency components \nof the input waveform.\n\n*/\n\n// Define a first order lowpass filter\nfunction lowpass(sample, cutoffFrequency) {\n    // Calculate the Nyquist frequency, which is half the sample rate\n    // of the waveform.\n    // `sampleRate` is a global constant\n    const nyquistFrequency = 0.5 * sampleRate;\n    \n    // Create a new array for the filtered waveform.\n    let filtered = 0;\n    \n    // Skip the first sample, since we don't have a previous sample\n    // to use in the filtering process.\n    if (x > 0) {\n        // Calculate the cutoff frequency as a fraction of the Nyquist\n        // frequency.\n        const f = cutoffFrequency / nyquistFrequency;\n        \n        // Apply the lowpass filter to the current sample.\n        const lastSample = g[0];\n        filtered = lastSample + f * (sample - lastSample);\n    } \n    else {\n        // For the first sample, just copy the original value.\n        filtered = sample;\n    }\n    // Cache the current filtered value\n    g[0] = filtered;\n    \n    return filtered;\n}\n// Create an unfiltered square wave\nconst squareWave = sign(s);\n\n// Define cutoff based on paramter 0\nconst cutoff = p[0]*(sampleRate/2);\n\n// Filter the square wave\nlowpass(squareWave, cutoff);\n",
    "showGrid": true,
    "gridSize": 4,
    "showGlobal": false,
    "showParams": true
  }